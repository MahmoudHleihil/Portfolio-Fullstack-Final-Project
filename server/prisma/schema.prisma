// Generator block: tells Prisma which client to generate
generator client {
  provider = "prisma-client-js"
}

// Datasource block: tells Prisma which database to connect to
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String   @unique
  passwordHash String
  role         String   @default("admin")
  createdAt    DateTime @default(now())
  projects     Project[]
  posts        Blog[]
  links        Link[]
  experience   Experience[]
  education    Education[]
  certs        Certification[]
  messages     ContactMessage[]
}

model Project {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  title        String
  slug         String    @unique
  summary      String?
  description  String?
  githubUrl    String?
  liveUrl      String?
  youtubeEmbed String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  images       ProjectImage[]
  skills       ProjectSkills[]
}

model Skill {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  level   Int?
  projects ProjectSkills[]
}

model ProjectSkills {
  projectId Int
  skillId   Int
  project   Project @relation(fields: [projectId], references: [id])
  skill     Skill   @relation(fields: [skillId], references: [id])
  @@id([projectId, skillId])
}

model ProjectImage {
  id         Int     @id @default(autoincrement())
  projectId  Int
  project    Project @relation(fields: [projectId], references: [id])
  url        String
  caption    String?
  orderIndex Int?
}

model Experience {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  company     String?
  roleTitle   String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  isCurrent   Boolean @default(false)
}

model Education {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  institution String?
  degree      String?
  field       String?
  startDate   DateTime?
  endDate     DateTime?
}

model Certification {
  id            Int     @id @default(autoincrement())
  userId        Int
  user          User    @relation(fields: [userId], references: [id])
  title         String?
  organization  String?
  credentialUrl String?
  dateIssued    DateTime?
}

model ContactMessage {
  id       Int      @id @default(autoincrement())
  userId   Int?
  user     User?    @relation(fields: [userId], references: [id])
  name     String
  email    String
  subject  String?
  message  String
  status   String   @default("new")
  sentAt   DateTime @default(now())
}

model Blog {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  slug        String   @unique
  contentHtml String
  coverUrl    String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    Comment[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  postId     Int
  post       Blog     @relation(fields: [postId], references: [id])
  authorName  String?
  authorEmail String?
  content     String
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Link {
  id     Int   @id @default(autoincrement())
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  title  String
  url    String
  kind   String?
}
